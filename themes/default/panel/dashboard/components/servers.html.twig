<div class="card border-0 shadow-sm rounded-3">
    <div class="card-header">
        <div class="d-flex align-items-center justify-content-between">
            <div class="d-flex align-items-center">
                <i class="fas fa-server me-2"></i>
                <h5 class="mb-1 fw-bold text-white">{{ 'pteroca.dashboard.my_servers'|trans }}</h5>
            </div>
            <a href="{{ path('panel', { routeName: 'servers' }) }}" class="btn btn-primary btn-sm pe-2">
                {{ 'pteroca.dashboard.view_all_servers'|trans }}
                <i class="fas fa-arrow-right ms-1"></i>
            </a>
        </div>
    </div>
    <div class="card-body p-0">
        {% if servers is not empty %}
            <div class="list-group list-group-flush">
                {% for server in servers %}
                    <div class="list-group-item border-0 py-3 placeholder-glow placeholder-wave" data-server-id="{{ server.id }}">
                        <div class="d-flex align-items-center justify-content-between">
                            <div class="d-flex align-items-center">
                                <div class="me-3">
                                    <i class="fas fa-server text-primary fs-5"></i>
                                </div>
                                <div>
                                    <h6 class="mb-1 fw-bold">{{ server.serverProduct.name }} #{{ server.getPterodactylServerIdentifier }}</h6>
                                    <div class="d-flex align-items-center">
                                        {% if not server.isSuspended %}
                                            <span class="badge badge-success me-2">{{ 'pteroca.servers.active'|trans }}</span>
                                        {% else %}
                                            <span class="badge badge-danger me-2">{{ 'pteroca.servers.suspended'|trans }}</span>
                                        {% endif %}
                                        <span class="badge placeholder col-2 me-2" data-state></span>
                                        <small class="text-muted">
                                            <i class="fas fa-globe me-1"></i>
                                            <span class="placeholder col-4 rounded-1" data-ip></span>
                                        </small>
                                    </div>
                                </div>
                            </div>
                            <div>
                                <a href="{% if not use_pterodactyl_panel_as_client_panel() %}{{ path('panel', { routeName: 'server', id: server.pterodactylServerIdentifier }) }}{% else %}{{ get_pterodactyl_panel_url('/server/' ~ server.pterodactylServerIdentifier) }}{% endif %}"
                                   target="{% if use_pterodactyl_panel_as_client_panel() %}_blank{% else %}_self{% endif %}"
                                   class="btn btn-primary btn-sm pt-1 pb-1 pe-3">
                                    <i class="fas fa-cog m-1"></i>
                                    <span class="d-none d-md-inline">{{ 'pteroca.servers.manage_server'|trans }}</span>
                                </a>
                            </div>
                        </div>
                    </div>
                {% endfor %}
            </div>
        {% else %}
            <div class="text-center py-5">
                <div class="bg-light rounded-circle mx-auto mb-4" style="width: 80px; height: 80px; display: flex; align-items: center; justify-content: center;">
                    <i class="fas fa-server text-muted" style="font-size: 2rem;"></i>
                </div>
                <h6 class="fw-bold text-dark mb-2">{{ 'pteroca.dashboard.no_servers'|trans }}</h6>
                <p class="text-muted mb-4">{{ 'pteroca.dashboard.no_servers_description'|trans }}</p>
                <a href="{{ path('panel', { routeName: 'store' }) }}" class="btn btn-primary rounded-pill">
                    <i class="fas fa-plus me-2"></i>
                    {{ 'pteroca.dashboard.order_first_server'|trans }}
                </a>
            </div>
        {% endif %}
    </div>
</div>

{% block body_javascript %}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const servers = document.querySelectorAll('[data-server-id]');

            servers.forEach(server => {
                const serverId = server.getAttribute('data-server-id'),
                    endpointUrl = '{{ path('panel') }}/api/server/' + serverId + '/details'

                fetch(endpointUrl)
                    .then(response => response.json())
                    .then(data => {
                        updateServerDashboardElements(server, data);
                        document.querySelectorAll('.placeholder-glow').forEach(element => element.classList.remove('placeholder-glow'));
                        document.querySelectorAll('.placeholder-wave').forEach(element => element.classList.remove('placeholder-wave'));
                    })
                    .catch(error => console.error('Error fetching server details:', error));
            })

            function updateServerDashboardElements(server, data, prefix = '') {
                for (const [key, value] of Object.entries(data)) {
                    let dataKey = prefix ? `${prefix}-${key}` : key;
                    dataKey = dataKey.replaceAll(' ', '-').replaceAll('.', '-').toLowerCase();
                    if (typeof value === 'object' && value !== null) {
                        updateServerDashboardElements(server, value, dataKey);
                    } else {
                        const element = server.querySelector(`[data-${dataKey}]`);
                        if (element) {
                            if (dataKey === 'state') {
                                updateServerStateBadge(element, value);
                            } else if (element.hasAttribute('data-unit')) {
                                element.textContent = `${value} ${element.getAttribute('data-unit')}`;
                            } else {
                                element.textContent = value;
                            }
                            element.classList.remove('placeholder');
                        }
                    }
                }
            }

            function updateServerStateBadge(element, state) {
                const stateConfig = {
                    'running': { class: 'badge-success', text: '{{ 'pteroca.servers.state.running'|trans }}' },
                    'stopped': { class: 'badge-secondary', text: '{{ 'pteroca.servers.state.stopped'|trans }}' },
                    'starting': { class: 'badge-warning', text: '{{ 'pteroca.servers.state.starting'|trans }}' },
                    'stopping': { class: 'badge-warning', text: '{{ 'pteroca.servers.state.stopping'|trans }}' },
                    'offline': { class: 'badge-danger', text: '{{ 'pteroca.servers.state.offline'|trans }}' }
                };

                const config = stateConfig[state] || { class: 'badge-secondary', text: state };
                
                element.className = `badge ${config.class} me-2`;
                element.textContent = config.text;
            }
        });
    </script>
{% endblock %}
