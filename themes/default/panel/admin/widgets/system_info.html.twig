<div class="card border-0 shadow-sm rounded-3 h-100">
    <div class="card-header border-0 p-4">
        <div class="d-flex align-items-center">
            <i class="fas fa-server me-2 text-info"></i>
            <h5 class="mb-0 fw-semibold">{{ 'pteroca.admin.overview.system'|trans }}</h5>
        </div>
    </div>
    <div class="card-body p-4">
        <div class="mb-3">
            <div class="d-flex justify-content-between align-items-center">
                <span class="fw-semibold text-muted">PteroCA Version:</span>
                <div>
                    <span class="fw-bold">v{{ get_app_version() }}</span>
                    <span id="pteroca-version-result"></span>
                </div>
            </div>
        </div>
        <hr class="my-3">
        <div class="mb-3">
            <div class="d-flex justify-content-between align-items-center">
                <span class="fw-semibold text-muted">PteroCA Pterodactyl Addon:</span>
                <div>
                    <span class="fw-bold" style="word-break: break-word; font-size: 0.9em; text-align: right;">
                        {% if pterocaPluginVersion %}
                            v{{ pterocaPluginVersion }}
                        {% else %}
                            <span class="text-muted">
                                <i class="fa-solid fa-question me-1"></i>{{ 'pteroca.admin.overview.pteroca_plugin_not_detected'|trans }}
                            </span>
                        {% endif %}
                    </span>
                    {% if pterocaPluginVersion %}
                        <span id="addon-version-result"></span>
                    {% endif %}
                </div>
            </div>
        </div>
        <hr class="my-3">
        <div class="mb-3">
            <div class="d-flex justify-content-between align-items-center">
                <span class="fw-semibold text-muted">Pterodactyl API:</span>
                <span class="{{ pterodactylStatus ? 'text-success' : 'text-danger' }} fw-semibold">
                    {{ pterodactylStatus ? '<i class="fa-solid fa-check me-1"></i>OK' : '<i class="fa-solid fa-x me-1"></i>Error' }}
                </span>
            </div>
        </div>
        <hr class="my-3">
        <div class="mb-3">
            <div class="d-flex justify-content-between align-items-center">
                <span class="fw-semibold text-muted">PHP:</span>
                <span class="fw-bold" style="word-break: break-word; font-size: 0.9em; text-align: right;">{{ phpVersion }}</span>
            </div>
        </div>
        <hr class="my-3">
        <div class="mb-3">
            <div class="d-flex justify-content-between align-items-center">
                <span class="fw-semibold text-muted">Database:</span>
                <span class="fw-bold" style="word-break: break-word; font-size: 0.9em; text-align: right;">{{ databaseVersion }}</span>
            </div>
        </div>
        <hr class="my-3">
        <div class="mb-3">
            <div class="d-flex justify-content-between align-items-center">
                <span class="fw-semibold text-muted">Web:</span>
                <span class="fw-bold" style="word-break: break-word; font-size: 0.9em; text-align: right;">{{ webserver }}</span>
            </div>
        </div>
        <hr class="my-3">
        <div class="mb-0">
            <div class="d-flex justify-content-between align-items-center">
                <span class="fw-semibold text-muted">Host:</span>
                <span class="fw-bold" style="word-break: break-word; font-size: 0.9em; text-align: right;">{{ os|join(' ') }}</span>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const currentVersion = '{{ get_app_version() }}',
            pterocaVersionResult = document.getElementById('pteroca-version-result'),
            addonVersionResult = document.getElementById('addon-version-result'),
            currentAddonVersion = '{{ pterocaPluginVersion ?? '' }}';

        fetch('{{ path('check_version') }}')
            .then(response => response.json())
            .then(data => {
                // Check PteroCA version
                pterocaVersionResult.innerHTML = ' <i class="fa fa-x"></i> {{ 'pteroca.admin.overview.update_available'|trans }}';
                pterocaVersionResult.classList.add('text-danger');
                pterocaVersionResult.classList.remove('text-success');
                if (compareVersions(currentVersion, data.latestVersion.replace('v', '')) >= 0) {
                    pterocaVersionResult.innerHTML = ' <i class="fa fa-check"></i> {{ 'pteroca.admin.overview.up_to_date'|trans }}';
                    pterocaVersionResult.classList.add('text-success');
                    pterocaVersionResult.classList.remove('text-danger');
                } else {
                    pterocaVersionResult.innerHTML = ' <i class="fa fa-x"></i> {{ 'pteroca.admin.overview.update_available'|trans }}';
                    pterocaVersionResult.classList.add('text-danger');
                    pterocaVersionResult.classList.remove('text-success');
                }

                if (addonVersionResult && currentAddonVersion && data.pterodactylAddonVersion) {
                    const latestAddonVersion = data.pterodactylAddonVersion.latestVersion.replace('v', '');
                    if (compareVersions(currentAddonVersion, latestAddonVersion) >= 0) {
                        addonVersionResult.innerHTML = ' <i class="fa fa-check"></i> {{ 'pteroca.admin.overview.up_to_date'|trans }}';
                        addonVersionResult.classList.add('text-success');
                        addonVersionResult.classList.remove('text-danger');
                    } else {
                        addonVersionResult.innerHTML = ' <i class="fa fa-x"></i> {{ 'pteroca.admin.overview.update_available'|trans }}';
                        addonVersionResult.classList.add('text-danger');
                        addonVersionResult.classList.remove('text-success');
                    }
                }
            });
    });

    function compareVersions(version1, version2) {
        const v1Parts = version1.split('.').map(Number);
        const v2Parts = version2.split('.').map(Number);

        for (let i = 0; i < 3; i++) {
            if (v1Parts[i] > v2Parts[i]) {
                return 1;
            } else if (v1Parts[i] < v2Parts[i]) {
                return -1;
            }
        }

        return 0;
    }
</script>
